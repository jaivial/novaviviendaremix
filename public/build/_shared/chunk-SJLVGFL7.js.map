{
  "version": 3,
  "sources": ["../../../app/ScreenWidthProvider.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/ScreenWidthProvider.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/ScreenWidthProvider.tsx\");\n  import.meta.hot.lastModified = \"1732638222127.3867\";\n}\n// REMIX HMR END\n\n// app/ScreenWidthProvider.tsx\n\nimport React, { useState, useContext, createContext, useEffect } from \"react\";\n\n// --- INTERFACE ---\n// Define the types of the context\n\n// Create the context\nconst ScreenWidthContext = createContext(undefined);\n\n// Create the provider\nexport const ScreenWidthContextProvider = ({\n  children\n}) => {\n  _s();\n  const [screenWidth, setScreenWidth] = useState(0);\n  useEffect(() => {\n    if (typeof window === undefined) return;\n\n    // Create function handle resize\n    const handleResize = () => setScreenWidth(window.innerWidth);\n\n    // Add the event listener\n    window.addEventListener(\"resize\", handleResize);\n\n    // Set the intial screen width\n    setScreenWidth(window.innerWidth);\n\n    // Defne a clean-up function\n    return () => {\n      window.removeEventListener(\"resize\", handleResize);\n    };\n  }, []);\n  return <ScreenWidthContext.Provider value={{\n    screenWidth\n  }}>{children}</ScreenWidthContext.Provider>;\n};\n\n// --- CUSTOM HOOK ---\n_s(ScreenWidthContextProvider, \"p7mA4Om2cHpiZ8viGIkF1WDmDDM=\");\n_c = ScreenWidthContextProvider;\nexport const useScreenWidth = () => {\n  _s2();\n  const context = useContext(ScreenWidthContext);\n  if (!context) {\n    throw new Error(\"useScreenWidth must be used within a ScreenWidthContext Provider\");\n  }\n  return context;\n};\n_s2(useScreenWidth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"ScreenWidthContextProvider\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;;;AAwBA,mBAAsE;AA+B7D;AAtDT,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,kCAAoC,EAAE;AAAA,EAC/E;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAMN,IAAI,KAAK,aAAa;AAAtB,IACE,MAAM,aAAa;AAErB,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAA6B;AAC7B,cAAY,IAAI,eAAe;AACjC;AAWA,IAAM,yBAAqB,4BAAc,MAAS;AAG3C,IAAM,6BAA6B,CAAC;AAAA,EACzC;AACF,MAAM;AACJ,KAAG;AACH,QAAM,CAAC,aAAa,cAAc,QAAI,uBAAS,CAAC;AAChD,8BAAU,MAAM;AACd,QAAI,OAAO,WAAW;AAAW;AAGjC,UAAM,eAAe,MAAM,eAAe,OAAO,UAAU;AAG3D,WAAO,iBAAiB,UAAU,YAAY;AAG9C,mBAAe,OAAO,UAAU;AAGhC,WAAO,MAAM;AACX,aAAO,oBAAoB,UAAU,YAAY;AAAA,IACnD;AAAA,EACF,GAAG,CAAC,CAAC;AACL,SAAO,mDAAC,mBAAmB,UAAnB,EAA4B,OAAO;AAAA,IACzC;AAAA,EACF,GAAI,YAFG;AAAA;AAAA;AAAA;AAAA,SAEM;AACf;AAGA,GAAG,4BAA4B,8BAA8B;AAC7D,KAAK;AACE,IAAM,iBAAiB,MAAM;AAClC,MAAI;AACJ,QAAM,cAAU,yBAAW,kBAAkB;AAC7C,MAAI,CAAC,SAAS;AACZ,UAAM,IAAI,MAAM,kEAAkE;AAAA,EACpF;AACA,SAAO;AACT;AACA,IAAI,gBAAgB,8BAA8B;AAClD,IAAI;AACJ,aAAa,IAAI,4BAA4B;AAE7C,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": []
}
